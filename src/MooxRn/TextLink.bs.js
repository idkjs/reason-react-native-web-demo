// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var MyUtilsRN = require("./MyUtilsRN.bs.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_undefined = require("bs-platform/lib/js/js_undefined.js");
var ReactNative = require("react-native");

function CreateComponent(Impl) {
  var make = function (href, accessible, allowFontScaling, ellipsizeMode, numberOfLines, onLayout, onLongPress, onPress, pressRetentionOffset, selectable, style, testID, selectionColor, textBreakStrategy, adjustsFontSizeToFit, minimumFontScale, suppressHighlighting, value, children) {
    return ReasonReact.wrapJsForReason(Impl[/* view */0], {
                href: Js_undefined.fromOption(href),
                accessibilityRole: "link",
                accessible: Js_undefined.fromOption(MyUtilsRN.optBoolToOptJsBoolean(accessible)),
                allowFontScaling: Js_undefined.fromOption(MyUtilsRN.optBoolToOptJsBoolean(allowFontScaling)),
                ellipsizeMode: Js_undefined.fromOption(MyUtilsRN.option_map((function (param) {
                            if (param >= -866200747) {
                              if (param >= -856246640) {
                                return "tail";
                              } else {
                                return "middle";
                              }
                            } else if (param >= -989124320) {
                              return "head";
                            } else {
                              return "clip";
                            }
                          }), ellipsizeMode)),
                numberOfLines: Js_undefined.fromOption(numberOfLines),
                onLayout: Js_undefined.fromOption(onLayout),
                onLongPress: Js_undefined.fromOption(onLongPress),
                onPress: Js_undefined.fromOption(onPress),
                pressRetentionOffset: Js_undefined.fromOption(pressRetentionOffset),
                selectable: Js_undefined.fromOption(MyUtilsRN.optBoolToOptJsBoolean(selectable)),
                style: Js_undefined.fromOption(style),
                testID: Js_undefined.fromOption(testID),
                selectionColor: Js_undefined.fromOption(selectionColor),
                textBreakStrategy: Js_undefined.fromOption(MyUtilsRN.option_map((function (param) {
                            if (param !== -128197688) {
                              if (param >= 947848242) {
                                return "simple";
                              } else {
                                return "highQuality";
                              }
                            } else {
                              return "balanced";
                            }
                          }), textBreakStrategy)),
                adjustsFontSizeToFit: Js_undefined.fromOption(MyUtilsRN.optBoolToOptJsBoolean(adjustsFontSizeToFit)),
                minimumFontScale: Js_undefined.fromOption(minimumFontScale),
                suppressHighlighting: Js_undefined.fromOption(MyUtilsRN.optBoolToOptJsBoolean(suppressHighlighting))
              }, value !== undefined ? $$Array.append(/* array */[value], children) : children);
  };
  return /* module */[/* make */make];
}

var Impl = /* module */[/* Text */ReactNative.Text];

function make(href, accessible, allowFontScaling, ellipsizeMode, numberOfLines, onLayout, onLongPress, onPress, pressRetentionOffset, selectable, style, testID, selectionColor, textBreakStrategy, adjustsFontSizeToFit, minimumFontScale, suppressHighlighting, value, children) {
  return ReasonReact.wrapJsForReason(Impl[/* view */0], {
              href: Js_undefined.fromOption(href),
              accessibilityRole: "link",
              accessible: Js_undefined.fromOption(MyUtilsRN.optBoolToOptJsBoolean(accessible)),
              allowFontScaling: Js_undefined.fromOption(MyUtilsRN.optBoolToOptJsBoolean(allowFontScaling)),
              ellipsizeMode: Js_undefined.fromOption(MyUtilsRN.option_map((function (param) {
                          if (param >= -866200747) {
                            if (param >= -856246640) {
                              return "tail";
                            } else {
                              return "middle";
                            }
                          } else if (param >= -989124320) {
                            return "head";
                          } else {
                            return "clip";
                          }
                        }), ellipsizeMode)),
              numberOfLines: Js_undefined.fromOption(numberOfLines),
              onLayout: Js_undefined.fromOption(onLayout),
              onLongPress: Js_undefined.fromOption(onLongPress),
              onPress: Js_undefined.fromOption(onPress),
              pressRetentionOffset: Js_undefined.fromOption(pressRetentionOffset),
              selectable: Js_undefined.fromOption(MyUtilsRN.optBoolToOptJsBoolean(selectable)),
              style: Js_undefined.fromOption(style),
              testID: Js_undefined.fromOption(testID),
              selectionColor: Js_undefined.fromOption(selectionColor),
              textBreakStrategy: Js_undefined.fromOption(MyUtilsRN.option_map((function (param) {
                          if (param !== -128197688) {
                            if (param >= 947848242) {
                              return "simple";
                            } else {
                              return "highQuality";
                            }
                          } else {
                            return "balanced";
                          }
                        }), textBreakStrategy)),
              adjustsFontSizeToFit: Js_undefined.fromOption(MyUtilsRN.optBoolToOptJsBoolean(adjustsFontSizeToFit)),
              minimumFontScale: Js_undefined.fromOption(minimumFontScale),
              suppressHighlighting: Js_undefined.fromOption(MyUtilsRN.optBoolToOptJsBoolean(suppressHighlighting))
            }, value !== undefined ? $$Array.append(/* array */[value], children) : children);
}

exports.CreateComponent = CreateComponent;
exports.make = make;
/* Impl Not a pure module */
