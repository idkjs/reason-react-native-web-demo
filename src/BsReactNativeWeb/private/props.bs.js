// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var UtilsRN = require("./utilsRN.bs.js");

function serialize(handlers) {
  if (handlers !== undefined) {
    var handlers$1 = handlers;
    return {
            onMoveShouldSetResponder: UtilsRN.option_map((function (g, x) {
                    return Curry._1(g, x);
                  }), handlers$1[/* onMoveShouldSetResponder */0]),
            onMoveShouldSetResponderCapture: UtilsRN.option_map((function (g, x) {
                    return Curry._1(g, x);
                  }), handlers$1[/* onMoveShouldSetResponderCapture */1]),
            onResponderGrant: handlers$1[/* onResponderGrant */2],
            onResponderMove: handlers$1[/* onResponderMove */3],
            onResponderReject: handlers$1[/* onResponderReject */4],
            onResponderRelease: handlers$1[/* onResponderRelease */5],
            onResponderTerminate: handlers$1[/* onResponderTerminate */6],
            onResponderTerminationRequest: handlers$1[/* onResponderTerminationRequest */7],
            onStartShouldSetResponder: UtilsRN.option_map((function (g, x) {
                    return Curry._1(g, x);
                  }), handlers$1[/* onStartShouldSetResponder */8]),
            onStartShouldSetResponderCapture: UtilsRN.option_map((function (g, x) {
                    return Curry._1(g, x);
                  }), handlers$1[/* onStartShouldSetResponderCapture */9])
          };
  } else {
    return { };
  }
}

function extendView(className, accessibilityRole, accessibilityLabel, accessible, hitSlop, onAccessibilityTap, onLayout, onMagicTap, responderHandlers, pointerEvents, removeClippedSubviews, style, testID, accessibilityComponentType, accessibilityLiveRegion, collapsable, importantForAccessibility, needsOffscreenAlphaCompositing, renderToHardwareTextureAndroid, accessibilityTraits, accessibilityViewIsModal, shouldRasterizeIOS, moreProps) {
  return Object.assign({
              className: className,
              accessibilityRole: accessibilityRole,
              accessibilityLabel: accessibilityLabel,
              accessible: accessible,
              hitSlop: hitSlop,
              onAccessibilityTap: onAccessibilityTap,
              onLayout: onLayout,
              onMagicTap: onMagicTap,
              removeClippedSubviews: removeClippedSubviews,
              pointerEvents: UtilsRN.option_map((function (x) {
                      if (x >= 416112227) {
                        if (x >= 427151639) {
                          return "box-only";
                        } else {
                          return "box-none";
                        }
                      } else if (x >= -922086728) {
                        return "none";
                      } else {
                        return "auto";
                      }
                    }), pointerEvents),
              style: style,
              testID: testID,
              accessibilityComponentType: UtilsRN.option_map((function (x) {
                      if (x >= 310731477) {
                        if (x >= 735392028) {
                          return "radiobutton_unchecked";
                        } else {
                          return "radiobutton_checked-none";
                        }
                      } else if (x >= -639606286) {
                        return "button";
                      } else {
                        return "none";
                      }
                    }), accessibilityComponentType),
              accessibilityLiveRegion: UtilsRN.option_map((function (x) {
                      if (x !== -114955603) {
                        if (x >= 536661202) {
                          return "assertive";
                        } else {
                          return "none";
                        }
                      } else {
                        return "polite";
                      }
                    }), accessibilityLiveRegion),
              collapsable: collapsable,
              importantForAccessibility: UtilsRN.option_map((function (prop) {
                      if (prop >= 24641) {
                        if (prop >= 6039847) {
                          return "yes";
                        } else {
                          return "no";
                        }
                      } else if (prop >= -1017075213) {
                        return "noHideDescendants";
                      } else {
                        return "auto";
                      }
                    }), importantForAccessibility),
              needsOffscreenAlphaCompositing: needsOffscreenAlphaCompositing,
              renderToHardwareTextureAndroid: renderToHardwareTextureAndroid,
              accessibilityTraits: UtilsRN.option_map((function (traits) {
                      var to_string = function (param) {
                        if (param >= -522290177) {
                          if (param >= -50329203) {
                            if (param !== 5343647) {
                              if (param >= 829237851) {
                                if (param >= 1030299483) {
                                  return "image";
                                } else {
                                  return "selected";
                                }
                              } else if (param >= 15272742) {
                                return "summary";
                              } else {
                                return "header";
                              }
                            } else {
                              return "key";
                            }
                          } else if (param >= -123392599) {
                            if (param >= -66829956) {
                              return "disabled";
                            } else {
                              return "adjustable";
                            }
                          } else if (param >= -487088280) {
                            return "search";
                          } else {
                            return "allowsDirectInteraction";
                          }
                        } else if (param >= -727597924) {
                          if (param >= -683287213) {
                            if (param >= -639606286) {
                              return "button";
                            } else {
                              return "startsMedia";
                            }
                          } else if (param >= -707934868) {
                            return "pageTurn";
                          } else {
                            return "frequentUpdates";
                          }
                        } else if (param >= -922086728) {
                          if (param >= -856044371) {
                            return "text";
                          } else {
                            return "none";
                          }
                        } else if (param >= -944564230) {
                          return "link";
                        } else {
                          return "plays";
                        }
                      };
                      return $$Array.of_list(List.map(to_string, traits));
                    }), accessibilityTraits),
              accessibilityViewIsModal: accessibilityViewIsModal,
              shouldRasterizeIOS: shouldRasterizeIOS
            }, moreProps, serialize(responderHandlers));
}

exports.serialize = serialize;
exports.extendView = extendView;
/* No side effect */
